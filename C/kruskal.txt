#include<bits/stdc++.h>
#include<iostream>
using namespace std;


class Edge {
	public:
		int src;
		int dst;
		int wt;
};

int findParent(int v, int *parent){
	if (parent[v]==v){
		return v;
	}
	return findParent(parent[v], parent);
}

bool compare(Edge e1, Edge e2){
	return e1.wt<e2.wt;
}

void Kruskals(Edge *input,int n,int E)
{
	sort(input, input+E, compare);
	Edge *output = new Edge[n-1];


	int *parent= new int[n];
	for (int i = 0; i < n; i++)
	{
		parent[i]=i;
	}
	
	int i=0,count=0;
	while(count!=n-1)
	{
		Edge currentEdge = input[i];
		//check if adding edge is ok if it doesnot form cycle that is it doesnot have same parent
		int SourceParent = findParent(currentEdge.src, parent);
		int DestParent = findParent(currentEdge.dst, parent);
		if (SourceParent != DestParent)
		{
			output[count]= currentEdge;
			count++;
			parent[SourceParent]= DestParent;
		}
		i++;
	}
	for (int i = 0; i < n-1; i++)
	{
		cout<<output[i].src << " - " << output[i].dst << " : " <<output[i].wt<< endl;
	}
	
}

int main()
{
	int E;	//No of edges
	int n;	//No of vertices (0 to V-1)
	cin>>n>>E;
	Edge *input = new Edge[E];
	for(int i=0;i<E;++i)
	{
		int from,to,wt;
		cin>>from>>to>>wt;
		input[i].src = from;
		input[i].dst = to;
		input[i].wt = wt;
	}
	
	Kruskals(input, n, E);
	return 0;
}

//TIME COMPLEXITY: O(ElogE + ElogV)
//ElogE for sorting E edges in edge_list
//ElogV for applying FIND & UNION operations on E edges having V vertices

