#include <bits/stdc++.h>
using namespace std;

class TreeNode
{
public:
    int data;
    TreeNode *left;
    TreeNode *right;

    TreeNode(int data)
    {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};

void insert(TreeNode *&root, int data)
{
    TreeNode *n = new TreeNode(data);
    TreeNode *temp = root;
    while (temp != NULL)
    {
        if ((n->data) > (temp->data))
        {
            if ((temp->right) == NULL)
            {
                temp->right = n;
                return;
            }
            temp = temp->right;
        }
        else
        {
            if ((temp->left) == NULL)
            {
                temp->left = n;
                return;
            }
            temp = temp->left;
        }
    }
    return;
}

void inOrder(TreeNode *root)
{
    if (root)
    {
        inOrder(root->left);
        cout << root->data << " ";
        inOrder(root->right);
    }
}

void postOrder(TreeNode *root)
{
    if (root)
    {
        postOrder(root->left);
        postOrder(root->right);
        cout << root->data << " ";
    }
}

void preOrder(TreeNode *root)
{
    if (root)
    {
        cout << root->data << " ";
        preOrder(root->left);
        preOrder(root->right);
    }
}

void inOrder_non_recursive(TreeNode *root){
    stack<TreeNode*> st;
    TreeNode* curr = root;
    while(true){
        if(curr != NULL){
            st.push(curr);
            curr = curr -> left;
        }
        else if(!st.empty()){
            TreeNode* poped_n = st.top();
            st.pop();
            cout << poped_n->data << " ";
            curr = poped_n -> right;
        }else{
            return;
        }
    }
}

void postOrder_non_recursive(TreeNode* root){
    // Using two stacks
    stack<TreeNode*> st1;
    stack<TreeNode*> st2;
    st1.push(root);
    TreeNode* curr;
    while(!st1.empty()){
        curr = st1.top();
        st1.pop();
        st2.push(curr);
        if(curr -> left != NULL){
            st1.push(curr->left);
        }
        if(curr -> right != NULL){
            st1.push(curr -> right);
        }
    }

    while(!st2.empty()){
        cout << st2.top()->data<< " ";
        st2.pop();
    }
}

void non_recursive_preOrder(TreeNode* root){
    TreeNode * curr = root;
    stack<TreeNode*> st;
    st.push(root);
    while(!st.empty()){
        curr = st.top();
        st.pop();
        if(curr-> right != NULL){
            st.push(curr -> right);
        }
        if(curr -> left != NULL){
            st.push(curr -> left);
        }
        cout << curr -> data << " ";
    }
}
int main()
{
    TreeNode *root = new TreeNode(16);

    int ch;
    do
    {
        cout << "\n1. Insert\n2. Traversal\n3. exit\n";
        cout << "Enter Your choice: ";
        cin >> ch;
        switch (ch)
        {
        case 1:
        {

            int e;
            cout << "Enter element to insert: ";
            cin >> e;
            insert(root, e);
            break;
        }

        case 2:
        {

            int c;
            do
            {
                cout << "\n1. recursive inorder\n2. recursive postOrder\n3. recursive preOrder\n4. non recusrsive inorder\n5. non recursive postOrder\n6. non recursive preOrder\n7. Go back\n";
                cout << endl;
                cout << "Enter your choice : " << endl;
                cin >> c;

                switch (c)
                {
                case 1:
                {
                    cout << "Inorder traversal : ";
                    inOrder(root);
                    break;
                }

                case 2:
                {
                    cout << "postOrder traversal : ";
                    postOrder(root);
                    break;
                }

                case 3:
                {
                    cout << "PreOrder traversal : ";
                    preOrder(root);
                    break;
                }

                case 4:
                {
                    cout << "Non recursive Inorder traversal : ";
                    inOrder_non_recursive(root);
                    break;
                }

                case 5:
                {
                    cout << "Non Recursive Post Order : ";
                    postOrder_non_recursive(root);
                    break;
                }

                case 6:
                {
                    cout << "Non recursive preOrder : ";
                    non_recursive_preOrder(root);
                    break;
                }

                case 7:
                {
                    cout << "Going back....." << endl;
                    break;
                }
                }
            } while (c != 7);
            break;
        }
        case 3:
            cout << "Terminating...." << endl;
            break;
        }

    } while (ch != 3);
    return 0;
}

