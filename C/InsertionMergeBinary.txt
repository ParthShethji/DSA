#include <bits/stdc++.h>
using namespace std; 
void outputArray(int arr[], int n){
    cout<<"Array: "; 
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" "; 
    }
    cout<<endl; 
}

void swap(int arr[], int a , int b){
    int temp = arr[a];  
   arr[a] = arr[b]; 
   arr[b] = temp;  
}
void insertionSort(){ 
    cout<<"Length: "; 
    int n; cin>>n; 
    int arr[n]; 
    cout<<"Array: "; 
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    for(int i=0; i<n-1; i++){
        for(int j=i+1; j>0; j--){
            if(arr[j-1]>arr[j]){
                swap(arr, j, j-1);
            }
        }
    }
    outputArray(arr, n); 
} 

void merge(int array[], int const left, int const mid, int const right)
{
	auto const subArrayOne = mid - left + 1;
	auto const subArrayTwo = right - mid;

	auto *leftArray = new int[subArrayOne],
		*rightArray = new int[subArrayTwo];

	for (auto i = 0; i < subArrayOne; i++)
		leftArray[i] = array[left + i];
	for (auto j = 0; j < subArrayTwo; j++)
		rightArray[j] = array[mid + 1 + j];

	auto indexOfSubArrayOne= 0, indexOfSubArrayTwo = 0;
	int indexOfMergedArray = left;

	while (indexOfSubArrayOne < subArrayOne
		&& indexOfSubArrayTwo < subArrayTwo) {
		if (leftArray[indexOfSubArrayOne]
			<= rightArray[indexOfSubArrayTwo]) {
			array[indexOfMergedArray]
				= leftArray[indexOfSubArrayOne];
			indexOfSubArrayOne++;
		}
		else {
			array[indexOfMergedArray]
				= rightArray[indexOfSubArrayTwo];
			indexOfSubArrayTwo++;
		}
		indexOfMergedArray++;
	}
	while (indexOfSubArrayOne < subArrayOne) {
		array[indexOfMergedArray]
			= leftArray[indexOfSubArrayOne];
		indexOfSubArrayOne++;
		indexOfMergedArray++;
	}
	while (indexOfSubArrayTwo < subArrayTwo) {
		array[indexOfMergedArray]
			= rightArray[indexOfSubArrayTwo];
		indexOfSubArrayTwo++;
		indexOfMergedArray++;
	}
	delete[] leftArray;
	delete[] rightArray;
}
void mergeSort(int array[], int const begin, int const end)
{
	if (begin >= end){
        return; 
    }
	auto mid = begin + (end - begin) / 2;
	mergeSort(array, begin, mid);
	mergeSort(array, mid + 1, end);
	merge(array, begin, mid, end);
    outputArray(array,end+1); 
}

void mergeSorty(){
    cout<<"Length: "; 
    int n; cin>>n; 
    int array[n]; 
    cout<<"Array: "; 
    for(int i=0; i<n; i++){
        cin>>array[i];
    }
    mergeSort(array,0,n-1); 
}
int quickSort(){
    return 0; 
}
int binarySearch()
{
    cout<<"Length: "; 
    int n; cin>>n; 
    int arr[n]; 
    cout<<"Array: "; 
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    cout<<"Element: ";
    int x; cin>>x;  
    int target = x; 
    int start=0, end=n-1; 
    while(start<=end){
        int mid=start+(end-start)/2; 
        if(arr[mid]>target){
            end=mid-1; 
        }
        else if(arr[mid]<target){
            start=mid+1; 
        }
        else{
            cout<<"Index of given element: "<<mid<<endl;
            return 0; 
        }
    }
    return 0; 
}
int main(){
    bool flag=true; 
    while(flag){
        cout<<"Choices: "<<endl;
        cout<<"1. Insertion Sort"<<endl;
        cout<<"2. Merge Sort / Quick Sort"<<endl;
        cout<<"3. Binary Search"<<endl;
        cout<<"4. Exit"<<endl;
        cout<<"Enter your choice: ";
        int n; cin>>n; 
        switch(n){
            case 1: 
                insertionSort();
                break; 
            case 2: 
                mergeSorty();
                break;
            case 3: 
                binarySearch();
                break;
            case 4: 
                flag = false; 
                break; 
            default: 
                flag = false; 
                break; 
        }
    }
    return 0; 
}
