#include <iostream>
#include <stack>
#include <string>
#include <algorithm>

// Function to check if a character is an operator
bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

// Function to get operator precedence
int getPrecedence(char c) {
    if (c == '^') {
        return 3;
    } else if (c == '*' || c == '/') {
        return 2;
    } else if (c == '+' || c == '-') {
        return 1;
    } else {
        return 0;
    }
}

// Function to convert infix expression to postfix
std::string infixToPostfix(std::string infix) {
    std::stack<char> opStack;
    std::string postfix;
    for (char c : infix) {
        if (std::isalnum(c)) {  // If character is an operand, add it to postfix string
            postfix += c;
        } else if (c == '(') {  // If character is an opening parenthesis, push it onto operator stack
            opStack.push(c);
        } else if (c == ')') {  // If character is a closing parenthesis, pop operators from stack until opening parenthesis is reached
            while (!opStack.empty() && opStack.top() != '(') {
                postfix += opStack.top();
                opStack.pop();
            }
            opStack.pop();  // Pop opening parenthesis from stack
        } else if (isOperator(c)) {  // If character is an operator
            while (!opStack.empty() && getPrecedence(opStack.top()) >= getPrecedence(c)) {  // Pop operators from stack until top operator has lower precedence
                postfix += opStack.top();
                opStack.pop();
            }
            opStack.push(c);  // Push current operator onto stack
        }
    }
    while (!opStack.empty()) {  // Pop any remaining operators from stack
        postfix += opStack.top();
        opStack.pop();
    }
    return postfix;
}

// Function to convert infix expression to prefix
std::string infixToPrefix(std::string infix) {
    std::reverse(infix.begin(), infix.end());  // Reverse infix expression
    for (int i = 0; i < infix.length(); i++) {  // Replace opening and closing parentheses
        if (infix[i] == '(') {
            infix[i] = ')';
        } else if (infix[i] == ')') {
            infix[i] = '(';
        }
    }
    std::string prefix = infixToPostfix(infix);  // Convert reversed infix expression to postfix
    std::reverse(prefix.begin(), prefix.end());  // Reverse postfix expression to get prefix expression
    return prefix;


    
}

int main() {
    std::string infixExpression;
    std::cout << "Enter an infix expression: ";
    std::getline(std::cin, infixExpression);

    std::string postfixExpression = infixToPostfix(infixExpression);
    std::cout << "Postfix expression: " << postfixExpression << std::endl;

    std::string prefixExpression = infixToPrefix(infixExpression);
    std::cout << "Prefix expression: " << prefixExpression << std::endl;

    return 0;
}
